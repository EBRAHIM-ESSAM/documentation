======================
Chapter 6: Basic Views
======================

Search
======

**Reference**: the documentation related to this topic can be found in
:ref:`reference/view_architectures/search`.

.. note::

    **Goal**: at the end of this section, the search view should look like this:

    .. image:: 06_basicviews/search_01.png
      :align: center
      :alt: Search fields

    .. image:: 06_basicviews/search_02.png
      :align: center
      :alt: Filter

    .. image:: 06_basicviews/search_03.png
      :align: center
      :alt: Group By

Search views are slightly different from the list and form views since they don't display
*content*. Although they apply to a specific model, they are used to filter
other views' content (generally aggregated views such as
:ref:`reference/view_architectures/list`). Beyond the difference in use case, they are
defined the same way.

Their root element is ``<search>``. The most basic version of this view simply
lists all the fields for which a shortcut is desired:

.. code-block:: xml

    <search string="Tests">
        <field name="name"/>
        <field name="last_seen"/>
    </search>

The default search view generated by Odoo provides a shortcut to filter by ``name``. It is very
common to add the fields which the user is likely to filter on in a customized search view.

.. exercise:: Add a custom search view.

    Define a search view for the ``estate.property`` model in the appropriate XML file. Check the
    first image of this section's **Goal** for the list of fields.

After restarting the server, it should be possible to filter on the given fields.

Search views can also contain ``<filter>`` elements, which act as toggles for
predefined searches. Filters must have one of the following attributes:

- ``domain``: adds the given domain to the current search
- ``context``: adds some context to the current search; uses the key ``group_by`` to group
  results on the given field name

A simple example can be found
`here <https://github.com/odoo/odoo/blob/715a24333bf000d5d98b9ede5155d3af32de067c/addons/delivery/views/delivery_view.xml#L30-L44>`__.

Before going further in the exercise, it is necessary to introduce the 'domain' concept.

Domains
-------

**Reference**: the documentation related to this topic can be found in
:ref:`reference/orm/domains`.

In Odoo, a domain encodes conditions on
records: a domain is a list of criteria used to select a subset of a model's
records. Each criterion is a triplet with a *field name*, an *operator* and a *value*.
A record satisfies a criterion if the specified field meets the condition of the operator applied to the value.

For instance, when used on the *Product* model the following domain selects
all *services* with a unit price greater than *1000*::

    [('product_type', '=', 'service'), ('unit_price', '>', 1000)]

By default criteria are combined with an implicit AND, meaning *every* criterion
needs to be satisfied for a record to match a domain. The logical operators
``&`` (AND), ``|`` (OR) and ``!`` (NOT) can be used to explicitly combine
criteria. They are used in prefix position (the operator is inserted before
its arguments rather than between). For instance, to select products 'which are
services *OR* have a unit price which is *NOT* between 1000 and 2000'::

    ['|',
        ('product_type', '=', 'service'),
        '!', '&',
            ('unit_price', '>=', 1000),
            ('unit_price', '<', 2000)]

.. note:: XML does not allow ``<`` and ``&`` to be used inside XML
    elements. To avoid parsing errors, entity references should be used:
    ``&lt;`` for ``<`` and ``&amp;`` for ``&``. Other entity references
    (``&gt;``, ``&apos;`` & ``&quot;``) are optional.

    .. example::
        .. code-block:: xml

            <filter name="negative" domain="[('test_val', '&lt;', 0)]"/>

.. exercise:: Add filter and Group By.

    The following should be added to the previously created search view:

    - a filter which displays available properties, i.e. the state should be 'New' or
      'Offer Received'.
    - the ability to group results by postcode.

Looking good? At this point we are already able to create models and design a user interface which
makes sense business-wise. However, a key component is still missing: the
:doc:`link between models <07_relations>`.
